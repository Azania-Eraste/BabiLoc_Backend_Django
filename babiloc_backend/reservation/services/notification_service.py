"""
Service de notifications pour les r√©servations
G√®re l'envoi d'emails automatiques pour toutes les √©tapes de r√©servation
"""
from django.core.mail import send_mail, EmailMultiAlternatives
from django.template.loader import render_to_string
from django.conf import settings
from django.utils import timezone
from datetime import datetime
import logging

logger = logging.getLogger(__name__)


class NotificationService:
    """Service centralis√© pour toutes les notifications de r√©servation"""
    
    @staticmethod
    def envoyer_notification_nouvelle_reservation(reservation):
        """
        Envoie une notification au propri√©taire quand une nouvelle r√©servation est cr√©√©e
        """
        try:
            # Email au propri√©taire
            proprietaire_email = reservation.bien.proprietaire.email
            client_nom = f"{reservation.user.first_name} {reservation.user.last_name}"
            
            subject = f"üéâ Nouvelle r√©servation pour {reservation.bien.nom}"
            
            # Contexte pour le template
            context = {
                'proprietaire_nom': reservation.bien.proprietaire.first_name,
                'client_nom': client_nom,
                'client_email': reservation.user.email,
                'client_telephone': getattr(reservation.user, 'telephone', 'Non renseign√©'),
                'bien_nom': reservation.bien.nom,
                'date_debut': reservation.date_debut,
                'date_fin': reservation.date_fin,
                'prix_total': reservation.prix_total,
                'statut': reservation.get_status_display(),
                'url_gestion': f"{settings.FRONTEND_URL}/gestion/reservations",
                'date_creation': reservation.created_at,
            }
            
            # Rendu du template HTML
            html_content = render_to_string(
                'emails/proprietaire_nouvelle_reservation.html',
                context
            )
            text_content = render_to_string(
                'emails/proprietaire_nouvelle_reservation.txt',
                context
            )
            
            # Envoi de l'email
            email = EmailMultiAlternatives(
                subject=subject,
                body=text_content,
                from_email=settings.DEFAULT_FROM_EMAIL,
                to=[proprietaire_email]
            )
            email.attach_alternative(html_content, "text/html")
            email.send()
            
            logger.info(f"Notification nouvelle r√©servation envoy√©e au propri√©taire {proprietaire_email}")
            return True
            
        except Exception as e:
            logger.error(f"Erreur envoi notification nouvelle r√©servation: {e}")
            return False
    
    @staticmethod
    def envoyer_confirmation_reservation_client(reservation):
        """
        Envoie une confirmation de r√©servation au client
        """
        try:
            client_email = reservation.user.email
            client_nom = f"{reservation.user.first_name} {reservation.user.last_name}"
            
            subject = f"‚úÖ Confirmation de votre r√©servation - {reservation.bien.nom}"
            
            context = {
                'client_nom': client_nom,
                'bien_nom': reservation.bien.nom,
                'proprietaire_nom': f"{reservation.bien.proprietaire.first_name} {reservation.bien.proprietaire.last_name}",
                'proprietaire_telephone': getattr(reservation.bien.proprietaire, 'telephone', 'Non renseign√©'),
                'date_debut': reservation.date_debut,
                'date_fin': reservation.date_fin,
                'prix_total': reservation.prix_total,
                'statut': reservation.get_status_display(),
                'numero_reservation': reservation.id,
                'url_reservations': f"{settings.FRONTEND_URL}/mes-reservations",
                'date_creation': reservation.created_at,
                'lieu_recuperation': getattr(reservation.bien, 'adresse', '√Ä convenir avec le propri√©taire'),
            }
            
            html_content = render_to_string(
                'emails/client_confirmation_reservation.html',
                context
            )
            text_content = render_to_string(
                'emails/client_confirmation_reservation.txt',
                context
            )
            
            email = EmailMultiAlternatives(
                subject=subject,
                body=text_content,
                from_email=settings.DEFAULT_FROM_EMAIL,
                to=[client_email]
            )
            email.attach_alternative(html_content, "text/html")
            email.send()
            
            logger.info(f"Confirmation r√©servation envoy√©e au client {client_email}")
            return True
            
        except Exception as e:
            logger.error(f"Erreur envoi confirmation client: {e}")
            return False
    
    @staticmethod
    def envoyer_notification_changement_statut(reservation, ancien_statut, nouveau_statut):
        """
        Envoie une notification quand le statut de la r√©servation change
        """
        try:
            # Messages selon le changement de statut
            messages_statut = {
                ('en_attente', 'confirmee'): {
                    'client_subject': '‚úÖ Votre r√©servation a √©t√© confirm√©e !',
                    'client_message': 'Bonne nouvelle ! Le propri√©taire a confirm√© votre r√©servation.',
                    'proprietaire_subject': '‚úÖ R√©servation confirm√©e',
                    'proprietaire_message': 'Vous avez confirm√© la r√©servation.',
                },
                ('en_attente', 'annulee'): {
                    'client_subject': '‚ùå R√©servation annul√©e',
                    'client_message': 'Votre r√©servation a √©t√© annul√©e par le propri√©taire.',
                    'proprietaire_subject': '‚ùå R√©servation annul√©e',
                    'proprietaire_message': 'Vous avez annul√© la r√©servation.',
                },
                ('confirmee', 'en_cours'): {
                    'client_subject': 'üöó Votre location commence !',
                    'client_message': 'Votre p√©riode de location a commenc√©. Profitez bien !',
                    'proprietaire_subject': 'üöó Location en cours',
                    'proprietaire_message': 'La p√©riode de location a commenc√©.',
                },
                ('en_cours', 'terminee'): {
                    'client_subject': 'üèÅ Location termin√©e - Merci !',
                    'client_message': 'Votre location est termin√©e. Merci d\'avoir utilis√© BabiLoc !',
                    'proprietaire_subject': 'üèÅ Location termin√©e',
                    'proprietaire_message': 'La location est termin√©e.',
                },
            }
            
            # R√©cup√©rer les messages pour ce changement de statut
            cle_changement = (ancien_statut, nouveau_statut)
            if cle_changement not in messages_statut:
                logger.warning(f"Pas de template pour le changement {ancien_statut} -> {nouveau_statut}")
                return False
            
            messages = messages_statut[cle_changement]
            
            # Envoi au client
            NotificationService._envoyer_email_changement_statut(
                reservation=reservation,
                destinataire=reservation.user,
                subject=messages['client_subject'],
                message_personnalise=messages['client_message'],
                type_destinataire='client'
            )
            
            # Envoi au propri√©taire
            NotificationService._envoyer_email_changement_statut(
                reservation=reservation,
                destinataire=reservation.bien.proprietaire,
                subject=messages['proprietaire_subject'],
                message_personnalise=messages['proprietaire_message'],
                type_destinataire='proprietaire'
            )
            
            logger.info(f"Notifications changement statut envoy√©es pour r√©servation {reservation.id}")
            return True
            
        except Exception as e:
            logger.error(f"Erreur envoi notification changement statut: {e}")
            return False
    
    @staticmethod
    def _envoyer_email_changement_statut(reservation, destinataire, subject, message_personnalise, type_destinataire):
        """
        Envoie un email de changement de statut √† un destinataire sp√©cifique
        """
        try:
            context = {
                'destinataire_nom': destinataire.first_name,
                'bien_nom': reservation.bien.nom,
                'date_debut': reservation.date_debut,
                'date_fin': reservation.date_fin,
                'prix_total': reservation.prix_total,
                'nouveau_statut': reservation.get_status_display(),
                'numero_reservation': reservation.id,
                'message_personnalise': message_personnalise,
                'url_dashboard': f"{settings.FRONTEND_URL}/dashboard",
                'type_destinataire': type_destinataire,
            }
            
            html_content = render_to_string(
                'emails/changement_statut_reservation.html',
                context
            )
            text_content = render_to_string(
                'emails/changement_statut_reservation.txt',
                context
            )
            
            email = EmailMultiAlternatives(
                subject=subject,
                body=text_content,
                from_email=settings.DEFAULT_FROM_EMAIL,
                to=[destinataire.email]
            )
            email.attach_alternative(html_content, "text/html")
            email.send()
            
            return True
            
        except Exception as e:
            logger.error(f"Erreur envoi email changement statut: {e}")
            return False
    
    @staticmethod
    def envoyer_notification_annulation(reservation, annule_par):
        """
        Envoie une notification d'annulation √† toutes les parties concern√©es
        """
        try:
            # D√©terminer qui a annul√© et adapter les messages
            if annule_par == 'client':
                # Client a annul√© -> notifier le propri√©taire
                NotificationService._envoyer_email_annulation_proprietaire(reservation)
                NotificationService._envoyer_email_annulation_confirmation_client(reservation)
            elif annule_par == 'proprietaire':
                # Propri√©taire a annul√© -> notifier le client
                NotificationService._envoyer_email_annulation_client(reservation)
                NotificationService._envoyer_email_annulation_confirmation_proprietaire(reservation)
            
            logger.info(f"Notifications annulation envoy√©es pour r√©servation {reservation.id}")
            return True
            
        except Exception as e:
            logger.error(f"Erreur envoi notification annulation: {e}")
            return False
    
    @staticmethod
    def _envoyer_email_annulation_proprietaire(reservation):
        """Email au propri√©taire quand le client annule"""
        subject = f"‚ùå Annulation de r√©servation - {reservation.bien.nom}"
        
        context = {
            'proprietaire_nom': reservation.bien.proprietaire.first_name,
            'client_nom': f"{reservation.user.first_name} {reservation.user.last_name}",
            'bien_nom': reservation.bien.nom,
            'date_debut': reservation.date_debut,
            'date_fin': reservation.date_fin,
            'prix_total': reservation.prix_total,
            'numero_reservation': reservation.id,
            'date_annulation': timezone.now(),
            'annule_par': 'client',
        }
        
        html_content = render_to_string('emails/annulation_proprietaire.html', context)
        text_content = render_to_string('emails/annulation_proprietaire.txt', context)
        
        email = EmailMultiAlternatives(
            subject=subject,
            body=text_content,
            from_email=settings.DEFAULT_FROM_EMAIL,
            to=[reservation.bien.proprietaire.email]
        )
        email.attach_alternative(html_content, "text/html")
        email.send()
    
    @staticmethod
    def _envoyer_email_annulation_client(reservation):
        """Email au client quand le propri√©taire annule"""
        subject = f"‚ùå Annulation de votre r√©servation - {reservation.bien.nom}"
        
        context = {
            'client_nom': reservation.user.first_name,
            'proprietaire_nom': f"{reservation.bien.proprietaire.first_name} {reservation.bien.proprietaire.last_name}",
            'bien_nom': reservation.bien.nom,
            'date_debut': reservation.date_debut,
            'date_fin': reservation.date_fin,
            'prix_total': reservation.prix_total,
            'numero_reservation': reservation.id,
            'date_annulation': timezone.now(),
            'annule_par': 'proprietaire',
            'url_support': f"{settings.FRONTEND_URL}/support",
        }
        
        html_content = render_to_string('emails/annulation_client.html', context)
        text_content = render_to_string('emails/annulation_client.txt', context)
        
        email = EmailMultiAlternatives(
            subject=subject,
            body=text_content,
            from_email=settings.DEFAULT_FROM_EMAIL,
            to=[reservation.user.email]
        )
        email.attach_alternative(html_content, "text/html")
        email.send()
    
    @staticmethod
    def _envoyer_email_annulation_confirmation_client(reservation):
        """Email de confirmation d'annulation au client"""
        subject = f"‚úÖ Confirmation d'annulation - {reservation.bien.nom}"
        
        context = {
            'client_nom': reservation.user.first_name,
            'bien_nom': reservation.bien.nom,
            'numero_reservation': reservation.id,
            'date_annulation': timezone.now(),
        }
        
        html_content = render_to_string('emails/confirmation_annulation_client.html', context)
        text_content = render_to_string('emails/confirmation_annulation_client.txt', context)
        
        email = EmailMultiAlternatives(
            subject=subject,
            body=text_content,
            from_email=settings.DEFAULT_FROM_EMAIL,
            to=[reservation.user.email]
        )
        email.attach_alternative(html_content, "text/html")
        email.send()
    
    @staticmethod
    def _envoyer_email_annulation_confirmation_proprietaire(reservation):
        """Email de confirmation d'annulation au propri√©taire"""
        subject = f"‚úÖ Confirmation d'annulation - {reservation.bien.nom}"
        
        context = {
            'proprietaire_nom': reservation.bien.proprietaire.first_name,
            'bien_nom': reservation.bien.nom,
            'numero_reservation': reservation.id,
            'date_annulation': timezone.now(),
        }
        
        html_content = render_to_string('emails/confirmation_annulation_proprietaire.html', context)
        text_content = render_to_string('emails/confirmation_annulation_proprietaire.txt', context)
        
        email = EmailMultiAlternatives(
            subject=subject,
            body=text_content,
            from_email=settings.DEFAULT_FROM_EMAIL,
            to=[reservation.bien.proprietaire.email]
        )
        email.attach_alternative(html_content, "text/html")
        email.send()
