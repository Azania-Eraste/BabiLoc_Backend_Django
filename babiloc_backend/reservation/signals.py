from django.db.models.signals import post_save
from django.dispatch import receiver
from .models import Bien, Tarif


@receiver(post_save, sender=Bien)
def auto_calculate_prices(sender, instance, created, **kwargs):
    """
    Signal qui recalcule automatiquement les prix hebdomadaire et mensuel
    apr√®s chaque sauvegarde d'un bien.
    """
    # √âviter les boucles infinies en v√©rifiant qu'on n'est pas d√©j√† en train de sauvegarder
    if hasattr(instance, '_calculating_prices'):
        return
    
    print(f"üîî SIGNAL - Auto-calcul des prix pour le bien: {instance.nom} (ID: {instance.id})")
    
    # Chercher le tarif journalier existant
    tarif_journalier = Tarif.objects.filter(
        bien=instance, 
        type_tarif='JOURNALIER'
    ).first()
    
    if tarif_journalier and tarif_journalier.prix > 0:
        prix_journalier = tarif_journalier.prix
        print(f"üí∞ SIGNAL - Prix journalier trouv√©: {prix_journalier}")
        
        # V√©rifier si les autres prix doivent √™tre calcul√©s
        tarif_hebdo = Tarif.objects.filter(bien=instance, type_tarif='HEBDOMADAIRE').first()
        tarif_mensuel = Tarif.objects.filter(bien=instance, type_tarif='MENSUEL').first()
        
        need_calculation = False
        
        if not tarif_hebdo or tarif_hebdo.prix == 0:
            need_calculation = True
            print(f"üìà SIGNAL - Prix hebdomadaire manquant ou √† 0")
            
        if not tarif_mensuel or tarif_mensuel.prix == 0:
            need_calculation = True
            print(f"üìà SIGNAL - Prix mensuel manquant ou √† 0")
        
        if need_calculation:
            print(f"‚ö° SIGNAL - Calcul automatique des prix...")
            
            # Marquer l'instance pour √©viter les boucles
            instance._calculating_prices = True
            
            # Calcul des prix avec r√©duction progressive
            prix_hebdomadaire = float(prix_journalier) * 7 * 0.85  # 15% de r√©duction pour 7 jours
            prix_mensuel = float(prix_journalier) * 30 * 0.70      # 30% de r√©duction pour 30 jours
            
            print(f"üí∞ SIGNAL - Prix hebdomadaire calcul√©: {prix_hebdomadaire}")
            print(f"üí∞ SIGNAL - Prix mensuel calcul√©: {prix_mensuel}")
            
            # Cr√©ation/mise √† jour du tarif hebdomadaire
            tarif_hebdo, created_hebdo = Tarif.objects.get_or_create(
                bien=instance,
                type_tarif='HEBDOMADAIRE',
                defaults={'prix': prix_hebdomadaire}
            )
            if not created_hebdo and tarif_hebdo.prix == 0:
                tarif_hebdo.prix = prix_hebdomadaire
                tarif_hebdo.save()
                print(f"üí∞ SIGNAL - Tarif hebdomadaire mis √† jour: {prix_hebdomadaire}")
            elif created_hebdo:
                print(f"üí∞ SIGNAL - Tarif hebdomadaire cr√©√©: {prix_hebdomadaire}")
            
            # Cr√©ation/mise √† jour du tarif mensuel
            tarif_mensuel, created_mensuel = Tarif.objects.get_or_create(
                bien=instance,
                type_tarif='MENSUEL',
                defaults={'prix': prix_mensuel}
            )
            if not created_mensuel and tarif_mensuel.prix == 0:
                tarif_mensuel.prix = prix_mensuel
                tarif_mensuel.save()
                print(f"üí∞ SIGNAL - Tarif mensuel mis √† jour: {prix_mensuel}")
            elif created_mensuel:
                print(f"üí∞ SIGNAL - Tarif mensuel cr√©√©: {prix_mensuel}")
            
            # Nettoyer le flag
            delattr(instance, '_calculating_prices')
            
            print(f"‚úÖ SIGNAL - Calcul automatique termin√© pour {instance.nom}")
        else:
            print(f"‚ÑπÔ∏è  SIGNAL - Prix d√©j√† corrects pour {instance.nom}")
    else:
        print(f"‚ö†Ô∏è  SIGNAL - Aucun tarif journalier valide trouv√© pour {instance.nom}")